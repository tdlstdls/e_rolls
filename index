<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>イベロ</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.6;
      padding: 20px;
      max-width: 1000px;
      margin: auto;
      background-color: #f0f2f5;
      color: #333;
    }
    .container {
      background: #fff;
      padding: 20px 30px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    h1, h2, h3 {
      color: #004085;
      border-bottom: 2px solid #e9ecef;
      padding-bottom: 5px;
    }
    .input-group {
      margin-bottom: 15px;
    }
    .controls {
      display: flex;
      align-items: flex-end;
      gap: 10px;
      margin-bottom: 20px;
    }
    .controls .input-item {
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .controls .input-item label {
      font-weight: bold;
      margin-bottom: 5px;
    }
    .controls .input-item input,
    .controls .input-item select {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .controls button {
      padding: 8px 16px;
      white-space: nowrap;
      margin: 0;
    }
    button {
      background-color: #007bff;
      color: #fff;
      border: none;
      padding: 12px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }
    button:hover {
      background-color: #0056b3;
    }
    #result-table-container {
      margin-top: 30px;
      overflow-x: auto;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
    }
    th, td {
      padding: 6px; 
      text-align: center;
      border: 1px solid #ddd;
    }
    th {
      background-color: #f8ffa;
      font-weight: bold;
      color: #495057;
    }
    .row-number-header {
      cursor: pointer;
      font-family: Arial, sans-serif;
      font-size: 1.2em;
    }
    .re-gacha-cell {
      line-height: 1;
    }
    /* 目玉のセルを赤の太字にするスタイル */
    .eyeball-cell {
      color: red;
      font-weight: bold;
    }
    /* 抽選ルートの着色スタイル */
    .path-cell {
      background-color: #e6ffe6 !important;
    }
  </style>
</head>
<body>

  <div class="container">
    <h1>イベロ</h1>
    
    <div class="controls">
      <div class="input-item">
        <label for="gachaIdSelector">Gacha</label>
        <select id="gachaIdSelector">
          <option value="1">1: ハロウィン</option>
        </select>
      </div>
      <div class="input-item">
        <label for="seedInput">SEED</label>
        <input type="number" id="seedInput" value="123456789">
      </div>
      <button id="executeButton">更新</button>
    </div>
    
    <div id="output"></div>
    <div id="result-table-container"></div>
  </div>

  <script>
    function xorshift32(seed) {
      let x = seed;
      x ^= x << 13;
      x ^= x >>> 17;
      x ^= x << 15;
      return x >>> 0;
    }

    const gachaData = {
      '1': {
        name: 'ハロウィン',
        targetRate: 600,
        rarityRates: { '0': 2000, '1': 5000, '2': 3000, '3': 0, '4': 0 }
      }
    };

    const gachaMaster = {
      '1': {
        '0': { itemCounts: 1, itemNo: [10] },
        '1': { itemCounts: 4, itemNo: [0, 3, 11, 12] },
        '2': { itemCounts: 4, itemNo: [2, 4, 5, 14] },
        '3': { itemCounts: 0, itemNo: [] },
        '4': { itemCounts: 0, itemNo: [] }
      }
    };

    const itemNameMaster = {
      0: "スピダ",
      1: "トレレ",
      2: "ネコボン",
      3: "ニャンピュ",
      4: "おかめ",
      5: "スニャ",
      10: "5千XP",
      11: "1万XP",
      12: "3万XP",
      14: "10万XP"
    };

    const itemNameToId = {
      "スピダ": 0,
      "トレレ": 1,
      "ネコボン": 2,
      "ニャンピュ": 3,
      "おかめ": 4,
      "スニャ": 5,
      "5千XP": 10,
      "1万XP": 11,
      "3万XP": 12,
      "10万XP": 14
    };

    const seedInput = document.getElementById('seedInput');
    const gachaIdSelector = document.getElementById('gachaIdSelector');
    const executeButton = document.getElementById('executeButton');
    const output = document.getElementById('output');
    const resultTableContainer = document.getElementById('result-table-container');

    let forceReGachaMode = false;

    executeButton.addEventListener('click', () => {
        runSimulationAndDisplay();
    });

    function runSimulationAndDisplay() {
      const seedValue = parseInt(seedInput.value, 10);
      if (isNaN(seedValue)) {
        output.textContent = '有効な数値を入力してください。';
        return;
      }

      let xorshiftArray = [];
      let moduloArray = [];
      let currentSeed = seedValue;
      for (let i = 0; i < 400; i++) {
        currentSeed = xorshift32(currentSeed);
        xorshiftArray.push(currentSeed);
        moduloArray.push(currentSeed % 10000);
      }

      const selectedGachaId = gachaIdSelector.value;
      const gacha = gachaData[selectedGachaId];
      const master = gachaMaster[selectedGachaId];

      if (!gacha || !master) {
        output.textContent = '無効なガチャIDです。';
        return;
      }
      
      let displayItems = new Array(300).fill("---");
      let reGachaItems = new Array(300).fill("---");
      let isReGachaOccurred = new Array(300).fill(false);
      let isEyeballCell = new Array(300).fill(false);
      let items = new Array(300).fill(-1);
      let rarities = new Array(300).fill(-1);
      
      const rates = gacha.rarityRates;
      const thresholds = {
        '0': rates['0'],
        '1': rates['0'] + rates['1'],
        '2': rates['0'] + rates['1'] + rates['2'],
        '3': rates['0'] + rates['1'] + rates['2'] + rates['3'],
        '4': 10000
      };
      
      // 全セルの抽選結果を計算
      for (let i = 0; i < 300; i++) {
        const hitSeedIndex = i;
        const raritySeedIndex = i + 1;
        const itemSeedIndex = i + 2;

        if (itemSeedIndex >= xorshiftArray.length) {
            continue;
        }

        const isHit = (moduloArray[hitSeedIndex] < gacha.targetRate);
        isEyeballCell[i] = isHit;

        let rarityId;
        if (moduloArray[raritySeedIndex] < thresholds['0']) { rarityId = 0; }
        else if (moduloArray[raritySeedIndex] < thresholds['1']) { rarityId = 1; }
        else if (moduloArray[raritySeedIndex] < thresholds['2']) { rarityId = 2; }
        else if (moduloArray[raritySeedIndex] < thresholds['3']) { rarityId = 3; }
        else { rarityId = 4; }
        rarities[i] = rarityId;

        let itemId = -1;
        let itemName = "";
        const itemInfo = master[rarityId];

        if (itemInfo.itemCounts > 0) {
          const itemOffset = xorshiftArray[itemSeedIndex] % itemInfo.itemCounts;
          itemId = itemInfo.itemNo[itemOffset];
          itemName = itemNameMaster[itemId] || "不明";
        }
        items[i] = itemId;

        let reGachaItemName = "";
        if (itemInfo.itemCounts >= 2) {
            const reGachaSeedIndex = itemSeedIndex + 1;
            if (reGachaSeedIndex < xorshiftArray.length) {
                const originalItemNoList = [...itemInfo.itemNo];
                const itemIndex = originalItemNoList.indexOf(itemId);
                if (itemIndex > -1) {
                    originalItemNoList.splice(itemIndex, 1);
                }
                const newDivisor = originalItemNoList.length;
                const seedForReGacha = xorshiftArray[reGachaSeedIndex];
                const reGachaOffset = seedForReGacha % newDivisor;
                const reGachaItemId = originalItemNoList[reGachaOffset];
                reGachaItems[i] = itemNameMaster[reGachaItemId];
            }
        }

        // 表示内容の決定
        if (isHit) {
            const nextRollRow = Math.floor((i + 1) / 3) + 1;
            const nextRollCol = String.fromCharCode('A'.charCodeAt(0) + ((i + 1) % 3));
            const nextRollAddress = `${nextRollCol}${nextRollRow}`;
            displayItems[i] = `${nextRollAddress})目玉`;
        } else if (rarityId === 1 && items[i] !== -1 && reGachaItems[i] !== "---") {
          let backOffset = 3;
          let tempIndex = i - 1;
          while (tempIndex >= 0 && isEyeballCell[tempIndex]) {
              backOffset += 1;
              tempIndex -= 1;
          }
          
          let prevItemId = -1;
          if (i >= backOffset) {
            const prevItemSeedIndex = (i - backOffset) + 2;
            if (prevItemSeedIndex < xorshiftArray.length) {
              const prevRaritySeedIndex = (i - backOffset) + 1;
              let prevRarityId;
              if (moduloArray[prevRaritySeedIndex] < thresholds['0']) { prevRarityId = 0; }
              else if (moduloArray[prevRaritySeedIndex] < thresholds['1']) { prevRarityId = 1; }
              else if (moduloArray[prevRaritySeedIndex] < thresholds['2']) { prevRarityId = 2; }
              else if (moduloArray[prevRaritySeedIndex] < thresholds['3']) { prevRarityId = 3; }
              else { prevRarityId = 4; }
              const prevItemInfo = master[prevRarityId];
              if (prevItemInfo && prevItemInfo.itemCounts > 0) {
                const prevItemOffset = xorshiftArray[prevItemSeedIndex] % prevItemInfo.itemCounts;
                prevItemId = prevItemInfo.itemNo[prevItemOffset];
              }
            }
          }

          let isPreviousReGachaOverlap = false;
          if (i >= 4 && isReGachaOccurred[i - 4] === true) {
            const prevReGachaItemName = reGachaItems[i - 4];
            if (prevReGachaItemName === itemNameMaster[items[i]]) {
              isPreviousReGachaOverlap = true;
            }
          }
          
          if (forceReGachaMode || prevItemId === items[i] || isPreviousReGachaOverlap) {
            isReGachaOccurred[i] = true;
            const nextRollRow = Math.floor((i + 4) / 3) + 1;
            const nextRollCol = String.fromCharCode('A'.charCodeAt(0) + ((i + 4) % 3));
            let nextRollAddress = `${nextRollCol}${nextRollRow}`;
            if (isPreviousReGachaOverlap) {
              nextRollAddress = `R${nextRollCol}${nextRollRow}`;
            }
            displayItems[i] = `${itemName}▼<br>${nextRollAddress}) ${reGachaItems[i]}`;
          } else {
            displayItems[i] = itemName;
          }
        } else {
          displayItems[i] = itemName;
        }
      }
      
      // 抽選経路の追跡と着色
      let path = [];
      let currentCellIndex = 0;
      let lastActualItemId = -1; 

      while (currentCellIndex < 300) {
          path.push(currentCellIndex);

          // (1) 目玉の場合
          if (isEyeballCell[currentCellIndex]) {
              currentCellIndex += 1;
              // lastActualItemIdは更新しない
          } 
          // (2) 再抽選の場合
          else if (rarities[currentCellIndex] === 1 && lastActualItemId !== -1 && items[currentCellIndex] === lastActualItemId) {
              // lastActualItemIdを再抽選後のアイテムIDに更新
              lastActualItemId = itemNameToId[reGachaItems[currentCellIndex]];
              currentCellIndex += 4;
          }
          // (3) 通常ロールの場合
          else {
              lastActualItemId = items[currentCellIndex];
              currentCellIndex += 3;
          }
      }

      output.innerHTML = '';
      createAndDisplayTable(displayItems, path, isEyeballCell);
      
      console.log("Re-gacha Occurred:", isReGachaOccurred);
      console.log("Calculated Re-Gacha Items:", reGachaItems);
    }
    
    function createAndDisplayTable(items, path, isEyeballCell) {
        let table = '<table><thead><tr><th class="row-number-header">❐</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody>';
        
        const pathSet = new Set(path);

        for (let r = 0; r < 100; r++) {
            table += `<tr><td>${r + 1}</td>`;
            for (let c = 0; c < 3; c++) {
                const index = r * 3 + c;
                let classList = ['re-gacha-cell'];
                if (pathSet.has(index)) {
                    classList.push('path-cell');
                }
                if (isEyeballCell[index]) {
                    classList.push('eyeball-cell');
                }
                table += `<td class="${classList.join(' ')}">${items[index]}</td>`;
            }
            table += '</tr>';
        }
        
        table += '</tbody></table>';
        resultTableContainer.innerHTML = table;

        const rowNumberHeader = document.querySelector('.row-number-header');
        if (rowNumberHeader) {
            rowNumberHeader.addEventListener('click', () => {
                forceReGachaMode = !forceReGachaMode;
                runSimulationAndDisplay();
            });
        }
    }

    runSimulationAndDisplay();
  </script>
</body>
</html>
